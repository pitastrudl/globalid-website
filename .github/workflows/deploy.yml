name: Deploy

on:
  push:
    branches:
      - main
      - feature/secure_envs
    paths:
      - website/**
      - .github/**

  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  upload:
    runs-on: ubuntu-24.04
    # Add a linting job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Assume AWS Role
        id: assume-role
        run: |
          CREDENTIALS=$(aws sts assume-role --role-arn "${{ secrets.AWS_ROLE_ARN }}" --role-session-name "GitHubActions-${{ github.run_id }}")

          ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')
          SECRET_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
          SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')

          echo "::add-mask::$ACCESS_KEY"
          echo "::add-mask::$SECRET_KEY"
          echo "::add-mask::$SESSION_TOKEN"

          echo "AWS_ACCESS_KEY_ID=$ACCESS_KEY" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=$SECRET_KEY" >> $GITHUB_OUTPUT
          echo "AWS_SESSION_TOKEN=$SESSION_TOKEN" >> $GITHUB_OUTPUT

      - name: Upload Files to S3 Securely
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume-role.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume-role.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.assume-role.outputs.AWS_SESSION_TOKEN }}
        run: aws s3 sync website/ s3://${{ secrets.AWS_BUCKET }}/ --delete

  invalidate:
    runs-on: ubuntu-24.04
    needs: upload
    steps:
      - name: Checkout code with extended history
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change if needed

      - name: Assume AWS role
        id: assume-role
        run: |
          CREDENTIALS=$(aws sts assume-role --role-arn "${{ secrets.AWS_ROLE_ARN }}" --role-session-name "GitHubActions-${{ github.run_id }}")

          ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')
          SECRET_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
          SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')

          echo "::add-mask::$ACCESS_KEY"
          echo "::add-mask::$SECRET_KEY"
          echo "::add-mask::$SESSION_TOKEN"

          echo "AWS_ACCESS_KEY_ID=$ACCESS_KEY" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=$SECRET_KEY" >> $GITHUB_OUTPUT
          echo "AWS_SESSION_TOKEN=$SESSION_TOKEN" >> $GITHUB_OUTPUT

      - name: Get changed files in website/
        id: changed-files
        run: |
          echo "Comparing commits: ${{ github.event.before }}  -> ${{ github.event.after }}"
          export CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}  ${{ github.event.after }} | grep '^website/' | sed 's#website/#/#' | awk '{printf "\"%s\" ", $0} END {print ""}' )


          if [[ -z "$CHANGED_FILES"  ]]; then
            echo "No files changed in website/. Skipping invalidation."
            echo "FILES_CHANGED=false" >> $GITHUB_ENV
          else
            echo "FILES_CHANGED=true" >> $GITHUB_ENV
            echo "CHANGED_FILES=${CHANGED_FILES}" >> $GITHUB_ENV
          fi

      - name: Invalidate files on CloudFront
        if: env.FILES_CHANGED == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume-role.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume-role.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.assume-role.outputs.AWS_SESSION_TOKEN }}
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths $(echo $CHANGED_FILES | xargs)
